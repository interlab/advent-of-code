#!/usr/bin/env raku

#`(((
--- День 3: Бинарная Диагностика ---

Подводная лодка издает какие-то странные скрипучие звуки, поэтому вы просите ее на всякий случай подготовить диагностический отчет.

Диагностический отчет (ваш ввод в головоломку) состоит из списка двоичных чисел, которые при правильном декодировании
могут рассказать вам много полезного об условиях подводной лодки. Первый параметр, который необходимо проверить, - это потребляемая мощность.

Вам необходимо использовать двоичные числа в диагностическом отчете для генерации двух новых двоичных чисел
(называемых гамма-частотой и эпсилон-частотой). Затем потребляемую мощность можно определить путем умножения гамма-частоты на эпсилон-частоту.

Каждый бит в гамма-частоте может быть определен путем нахождения наиболее распространенного бита в соответствующей
позиции всех чисел в диагностическом отчете. Например, учитывая следующий диагностический отчет:

00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010

Учитывая только первый бит каждого числа, имеется пять битов 0 и семь битов 1. Поскольку наиболее распространенный бит
равен 1, первый бит гамма-частоты равен 1.

Наиболее распространенный второй бит чисел в диагностическом отчете равен 0, поэтому второй бит гамма-частоты равен 0.

Наиболее распространенным значением третьего, четвертого и пятого битов являются 1, 1 и 0 соответственно, и поэтому
последние три бита гамма-частоты равны 110.

Итак, гамма-частота - это двоичное число 10110, или 22 в десятичной системе счисления.

Скорость эпсилона рассчитывается аналогичным образом; вместо того, чтобы использовать наиболее распространенный бит,
используется наименее распространенный бит из каждой позиции. Итак, коэффициент эпсилона равен 01001,
или 9 в десятичной системе счисления.
Умножение гамма-частоты (22) на эпсилон-частоту (9) дает потребляемую мощность 198.

Используйте двоичные числа в своем диагностическом отчете для расчета частоты гамма-излучения и частоты эпсилон,
а затем умножьте их вместе. Какова потребляемая мощность подводной лодки?
(Обязательно представляйте свой ответ в десятичной, а не двоичной форме.)
)))

#my $filename = 'input-day-3-test.txt';
my $filename = 'input-day-3.txt';

my @items = $?FILE.IO.dirname.IO.add($filename).slurp.trim.lines.map(*.comb.map(*.Int));
#say @items;

my $nlines = @items.elems - 1;
my $max = @items[0].elems - 1;
my ($zero, $one) = 0, 0;
my (@gamma, @epsilon, $g, $e);

for 0 .. $max -> $n2 {
    for 0 .. $nlines -> $n1 {
        given @items[$n1][$n2] {
            when 0 { $zero++; }
            when 1 { $one++; }
        }
    }
    @gamma[$n2] = $zero > $one ?? 0 !! 1;
    @epsilon[$n2] = @gamma[$n2] +^ 1;
    $one = 0;
    $zero = 0;
}

#say @gamma, ' ', @gamma.join('').parse-base(2);
#say @epsilon, ' ', @epsilon.join('').parse-base(2);

$g = @gamma.join('').parse-base(2);
$e = @epsilon.join('').parse-base(2);

say 'Answer: ', $g * $e; # Answer (test): 198
                         # Answer: 3009600

say 'Time execution: ', now - INIT now;
