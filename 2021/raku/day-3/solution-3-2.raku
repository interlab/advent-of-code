#!/usr/bin/env raku

#`(((
--- Часть вторая ---

Затем вы должны проверить рейтинг жизнеобеспечения, который можно определить, умножив рейтинг генератора кислорода на рейтинг скруббера CO2.

Как рейтинг генератора кислорода, так и рейтинг скруббера CO2 - это значения, которые можно найти
в вашем диагностическом отчете - найти их сложнее всего. Оба значения находятся с использованием
аналогичного процесса, который включает в себя фильтрацию значений до тех пор, пока не останется только одно.
Перед поиском любого значения рейтинга начните с полного списка двоичных чисел из вашего диагностического отчета
и рассмотрите только первый бит этих чисел. Затем:

Сохраняйте только числа, выбранные по битовым критериям для типа значения рейтинга, для которого вы ищете.
Отбросьте числа, которые не соответствуют критериям разрядности.
Если у вас осталось только одно число, остановитесь; это значение рейтинга, которое вы ищете.
В противном случае повторите процесс, учитывая следующий бит справа.

Критерии разрядности зависят от того, какой тип значения рейтинга вы хотите найти:

Чтобы определить рейтинг генератора кислорода, определите наиболее распространенное значение (0 или 1)
в текущей позиции бита и сохраните только числа с этим битом в этой позиции. Если 0 и 1 одинаково распространены,
сохраняйте значения с 1 в рассматриваемой позиции.
Чтобы определить мощность скруббера CO2, определите наименьшее общее значение (0 или 1) в текущей позиции бита
и сохраните только числа с этим битом в этой позиции. Если 0 и 1 одинаково распространены, сохраняйте
значения с 0 в рассматриваемой позиции.

Например, для определения номинального значения генератора кислорода с использованием того же примера
диагностического отчета, приведенного выше:

Начните со всех 12 чисел и учитывайте только первый бит каждого числа. 1 бит (7) больше, чем 0 бит (5),
поэтому сохраняйте только 7 чисел с 1 в первой позиции: 11110, 10110, 10111, 10101, 11100, 10000, и 11001.
Затем рассмотрим второй бит из 7 оставшихся чисел: бит 0 (4) больше, чем бит 1 (3), поэтому оставьте только
4 числа с 0 во второй позиции: 10110, 10111, 10101 и 10000.
В третьей позиции три из четырех чисел имеют 1, так что оставьте эти три: 10110, 10111 и 10101.
В четвертой позиции два из трех чисел имеют 1, так что оставьте эти два: 10110 и 10111.
В пятой позиции находится равное количество 0 бит и 1 бит (по одному на каждый). Итак, чтобы узнать рейтинг
генератора кислорода, оставьте число с 1 в этой позиции: 10111.
Поскольку осталось только одно число, остановитесь; рейтинг генератора кислорода равен 10111, или 23 в десятичной системе счисления.

Затем, чтобы определить номинальное значение скруббера CO2 из того же примера выше:

Начните снова со всех 12 чисел и учитывайте только первый бит каждого числа. Бит 0 (5) меньше, чем бит 1 (7),
поэтому оставьте только 5 чисел с 0 в первой позиции: 00100, 01111, 00111, 00010 и 01010.
Затем рассмотрим второй бит из 5 оставшихся чисел: 1 бит (2) меньше, чем 0 бит (3), поэтому оставьте только
2 числа с 1 во второй позиции: 01111 и 01010.
В третьей позиции находится равное количество 0 бит и 1 бит (по одному на каждый). Итак, чтобы определить мощность
скруббера CO2, оставьте число с 0 в этой позиции: 01010.
Поскольку осталось только одно число, остановитесь; рейтинг скруббера CO2 равен 01010, или 10 в десятичной системе счисления.

Наконец, чтобы найти рейтинг жизнеобеспечения, умножьте рейтинг генератора кислорода (23) на рейтинг скруббера CO2 (10), чтобы получить 230.

Используйте двоичные числа в своем диагностическом отчете для расчета мощности генератора кислорода и мощности скруббера CO2,
а затем умножьте их вместе.
Каков рейтинг жизнеобеспечения подводной лодки? (Обязательно представляйте свой ответ в десятичной, а не двоичной форме.)
)))

#my $filename = 'input-day-3-test.txt';
my $filename = 'input-day-3.txt';

my @lines = $?FILE.IO.dirname.IO.add($filename).slurp.trim.lines;
my @items = @lines.map(*.comb.map(*.Int));

my $cond_oxy = -> $zero, $one { $one >= $zero ?? 1 !! 0 };
my $cond_co2 = -> $zero, $one { $zero <= $one ?? 0 !! 1 };

sub eachitems(@items1 is copy, &cond) {
    my $max = @items1[0].elems - 1;
    my $nelems = @items1.elems;
    my ($zero, $one) = 0, 0;
    for 0..$max -> $n2 {
        for 0..$nelems-1 -> $n1 {
            with @items1[$n1][$n2] {
                $one += $_ +& 1;
                $zero += $_ +^ 1;
            }
        }
        # if ($zero|$one > 0) {
        my $res = &cond($zero, $one);
        for @items1.kv -> $i, $v {
            if $v[$n2] != $res {
                @items1[$i] = Nil;
                $nelems -= 1;
            }
        }
        @items1 = @items1.grep(*.so);
        # }
        $one = 0;
        $zero = 0;
        if $nelems == 1 {
            # say $n2, ' ', $max;
            return @items1;
        }
    }
    return @items1;
}

my $oxy = eachitems(@items, $cond_oxy)[0].join.parse-base(2);
my $co2 = eachitems(@items, $cond_co2)[0].join.parse-base(2);

say 'Answer: ', $oxy * $co2;
# Answer (test): 230
# Answer: 6940518

say 'Time execution: ', now - INIT now; # 0.0847073
